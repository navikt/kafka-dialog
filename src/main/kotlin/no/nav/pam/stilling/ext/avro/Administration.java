/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.pam.stilling.ext.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Administration extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8039850386332474298L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Administration\",\"namespace\":\"no.nav.pam.stilling.ext.avro\",\"fields\":[{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"AdministrationStatus\",\"symbols\":[\"RECEIVED\",\"PENDING\",\"DONE\"]}},{\"name\":\"remarks\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"RemarkType\",\"symbols\":[\"NOT_APPROVED_BY_LABOUR_INSPECTION\",\"NO_EMPLOYMENT\",\"DUPLICATE\",\"DISCRIMINATING\",\"REJECT_BECAUSE_CAPACITY\",\"FOREIGN_JOB\",\"COLLECTION_JOB\",\"UNKNOWN\"]}}},{\"name\":\"comments\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reportee\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"navIdent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Administration> ENCODER =
      new BinaryMessageEncoder<Administration>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Administration> DECODER =
      new BinaryMessageDecoder<Administration>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Administration> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Administration> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Administration> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Administration>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Administration to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Administration from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Administration instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Administration fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public AdministrationStatus status;
  @Deprecated public java.util.List<RemarkType> remarks;
  @Deprecated public String comments;
  @Deprecated public String reportee;
  @Deprecated public String navIdent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Administration() {}

  /**
   * All-args constructor.
   * @param status The new value for status
   * @param remarks The new value for remarks
   * @param comments The new value for comments
   * @param reportee The new value for reportee
   * @param navIdent The new value for navIdent
   */
  public Administration(AdministrationStatus status, java.util.List<RemarkType> remarks, String comments, String reportee, String navIdent) {
    this.status = status;
    this.remarks = remarks;
    this.comments = comments;
    this.reportee = reportee;
    this.navIdent = navIdent;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return status;
    case 1: return remarks;
    case 2: return comments;
    case 3: return reportee;
    case 4: return navIdent;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: status = (AdministrationStatus)value$; break;
    case 1: remarks = (java.util.List<RemarkType>)value$; break;
    case 2: comments = value$ != null ? value$.toString() : null; break;
    case 3: reportee = value$ != null ? value$.toString() : null; break;
    case 4: navIdent = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public AdministrationStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(AdministrationStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'remarks' field.
   * @return The value of the 'remarks' field.
   */
  public java.util.List<RemarkType> getRemarks() {
    return remarks;
  }


  /**
   * Sets the value of the 'remarks' field.
   * @param value the value to set.
   */
  public void setRemarks(java.util.List<RemarkType> value) {
    this.remarks = value;
  }

  /**
   * Gets the value of the 'comments' field.
   * @return The value of the 'comments' field.
   */
  public String getComments() {
    return comments;
  }


  /**
   * Sets the value of the 'comments' field.
   * @param value the value to set.
   */
  public void setComments(String value) {
    this.comments = value;
  }

  /**
   * Gets the value of the 'reportee' field.
   * @return The value of the 'reportee' field.
   */
  public String getReportee() {
    return reportee;
  }


  /**
   * Sets the value of the 'reportee' field.
   * @param value the value to set.
   */
  public void setReportee(String value) {
    this.reportee = value;
  }

  /**
   * Gets the value of the 'navIdent' field.
   * @return The value of the 'navIdent' field.
   */
  public String getNavIdent() {
    return navIdent;
  }


  /**
   * Sets the value of the 'navIdent' field.
   * @param value the value to set.
   */
  public void setNavIdent(String value) {
    this.navIdent = value;
  }

  /**
   * Creates a new Administration RecordBuilder.
   * @return A new Administration RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Administration RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Administration RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Administration RecordBuilder by copying an existing Administration instance.
   * @param other The existing instance to copy.
   * @return A new Administration RecordBuilder
   */
  public static Builder newBuilder(Administration other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Administration instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Administration>
    implements org.apache.avro.data.RecordBuilder<Administration> {

    private AdministrationStatus status;
    private java.util.List<RemarkType> remarks;
    private String comments;
    private String reportee;
    private String navIdent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.remarks)) {
        this.remarks = data().deepCopy(fields()[1].schema(), other.remarks);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.comments)) {
        this.comments = data().deepCopy(fields()[2].schema(), other.comments);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.reportee)) {
        this.reportee = data().deepCopy(fields()[3].schema(), other.reportee);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.navIdent)) {
        this.navIdent = data().deepCopy(fields()[4].schema(), other.navIdent);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Administration instance
     * @param other The existing instance to copy.
     */
    private Builder(Administration other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.remarks)) {
        this.remarks = data().deepCopy(fields()[1].schema(), other.remarks);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.comments)) {
        this.comments = data().deepCopy(fields()[2].schema(), other.comments);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reportee)) {
        this.reportee = data().deepCopy(fields()[3].schema(), other.reportee);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.navIdent)) {
        this.navIdent = data().deepCopy(fields()[4].schema(), other.navIdent);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public AdministrationStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public Builder setStatus(AdministrationStatus value) {
      validate(fields()[0], value);
      this.status = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'remarks' field.
      * @return The value.
      */
    public java.util.List<RemarkType> getRemarks() {
      return remarks;
    }


    /**
      * Sets the value of the 'remarks' field.
      * @param value The value of 'remarks'.
      * @return This builder.
      */
    public Builder setRemarks(java.util.List<RemarkType> value) {
      validate(fields()[1], value);
      this.remarks = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'remarks' field has been set.
      * @return True if the 'remarks' field has been set, false otherwise.
      */
    public boolean hasRemarks() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'remarks' field.
      * @return This builder.
      */
    public Builder clearRemarks() {
      remarks = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'comments' field.
      * @return The value.
      */
    public String getComments() {
      return comments;
    }


    /**
      * Sets the value of the 'comments' field.
      * @param value The value of 'comments'.
      * @return This builder.
      */
    public Builder setComments(String value) {
      validate(fields()[2], value);
      this.comments = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'comments' field has been set.
      * @return True if the 'comments' field has been set, false otherwise.
      */
    public boolean hasComments() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'comments' field.
      * @return This builder.
      */
    public Builder clearComments() {
      comments = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'reportee' field.
      * @return The value.
      */
    public String getReportee() {
      return reportee;
    }


    /**
      * Sets the value of the 'reportee' field.
      * @param value The value of 'reportee'.
      * @return This builder.
      */
    public Builder setReportee(String value) {
      validate(fields()[3], value);
      this.reportee = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'reportee' field has been set.
      * @return True if the 'reportee' field has been set, false otherwise.
      */
    public boolean hasReportee() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'reportee' field.
      * @return This builder.
      */
    public Builder clearReportee() {
      reportee = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'navIdent' field.
      * @return The value.
      */
    public String getNavIdent() {
      return navIdent;
    }


    /**
      * Sets the value of the 'navIdent' field.
      * @param value The value of 'navIdent'.
      * @return This builder.
      */
    public Builder setNavIdent(String value) {
      validate(fields()[4], value);
      this.navIdent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'navIdent' field has been set.
      * @return True if the 'navIdent' field has been set, false otherwise.
      */
    public boolean hasNavIdent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'navIdent' field.
      * @return This builder.
      */
    public Builder clearNavIdent() {
      navIdent = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Administration build() {
      try {
        Administration record = new Administration();
        record.status = fieldSetFlags()[0] ? this.status : (AdministrationStatus) defaultValue(fields()[0]);
        record.remarks = fieldSetFlags()[1] ? this.remarks : (java.util.List<RemarkType>) defaultValue(fields()[1]);
        record.comments = fieldSetFlags()[2] ? this.comments : (String) defaultValue(fields()[2]);
        record.reportee = fieldSetFlags()[3] ? this.reportee : (String) defaultValue(fields()[3]);
        record.navIdent = fieldSetFlags()[4] ? this.navIdent : (String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Administration>
    WRITER$ = (org.apache.avro.io.DatumWriter<Administration>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Administration>
    READER$ = (org.apache.avro.io.DatumReader<Administration>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.status.ordinal());

    long size0 = this.remarks.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (RemarkType e0: this.remarks) {
      actualSize0++;
      out.startItem();
      out.writeEnum(e0.ordinal());
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.comments);

    out.writeString(this.reportee);

    out.writeString(this.navIdent);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.status = AdministrationStatus.values()[in.readEnum()];

      long size0 = in.readArrayStart();
      java.util.List<RemarkType> a0 = this.remarks;
      if (a0 == null) {
        a0 = new SpecificData.Array<RemarkType>((int)size0, SCHEMA$.getField("remarks").schema());
        this.remarks = a0;
      } else a0.clear();
      SpecificData.Array<RemarkType> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<RemarkType>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          RemarkType e0 = (ga0 != null ? ga0.peek() : null);
          e0 = RemarkType.values()[in.readEnum()];
          a0.add(e0);
        }
      }

      this.comments = in.readString();

      this.reportee = in.readString();

      this.navIdent = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.status = AdministrationStatus.values()[in.readEnum()];
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<RemarkType> a0 = this.remarks;
          if (a0 == null) {
            a0 = new SpecificData.Array<RemarkType>((int)size0, SCHEMA$.getField("remarks").schema());
            this.remarks = a0;
          } else a0.clear();
          SpecificData.Array<RemarkType> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<RemarkType>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              RemarkType e0 = (ga0 != null ? ga0.peek() : null);
              e0 = RemarkType.values()[in.readEnum()];
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.comments = in.readString();
          break;

        case 3:
          this.reportee = in.readString();
          break;

        case 4:
          this.navIdent = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










