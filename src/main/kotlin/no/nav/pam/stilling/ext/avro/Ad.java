/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.pam.stilling.ext.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Ad extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7601503890652970043L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Ad\",\"namespace\":\"no.nav.pam.stilling.ext.avro\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"adnr\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"AdStatus\",\"symbols\":[\"ACTIVE\",\"INACTIVE\",\"STOPPED\",\"DELETED\",\"REJECTED\"]}},{\"name\":\"privacy\",\"type\":{\"type\":\"enum\",\"name\":\"PrivacyChannel\",\"symbols\":[\"INTERNAL_NOT_SHOWN\",\"SHOW_ALL\",\"DONT_SHOW_EMPLOYER\",\"DONT_SHOW_AUTHOR\"]}},{\"name\":\"administration\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Administration\",\"fields\":[{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"AdministrationStatus\",\"symbols\":[\"RECEIVED\",\"PENDING\",\"DONE\"]}},{\"name\":\"remarks\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"RemarkType\",\"symbols\":[\"NOT_APPROVED_BY_LABOUR_INSPECTION\",\"NO_EMPLOYMENT\",\"DUPLICATE\",\"DISCRIMINATING\",\"REJECT_BECAUSE_CAPACITY\",\"FOREIGN_JOB\",\"COLLECTION_JOB\",\"UNKNOWN\"]}}},{\"name\":\"comments\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reportee\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"navIdent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null},{\"name\":\"published\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"expires\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"created\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"updated\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"employer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Company\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"publicName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orgnr\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"parentOrgnr\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orgform\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null},{\"name\":\"categories\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StyrkCategory\",\"fields\":[{\"name\":\"styrkCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"medium\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reference\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"publishedByAdmin\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"businessName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"locations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"postalCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"county\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"municipal\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"latitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"longitude\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"municipal_code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"county_code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}},{\"name\":\"properties\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Property\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Ad> ENCODER =
      new BinaryMessageEncoder<Ad>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Ad> DECODER =
      new BinaryMessageDecoder<Ad>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Ad> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Ad> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Ad> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Ad>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Ad to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Ad from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Ad instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Ad fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String uuid;
  @Deprecated public String adnr;
  @Deprecated public String title;
  @Deprecated public AdStatus status;
  @Deprecated public PrivacyChannel privacy;
  @Deprecated public Administration administration;
  @Deprecated public String published;
  @Deprecated public String expires;
  @Deprecated public String created;
  @Deprecated public String updated;
  @Deprecated public Company employer;
  @Deprecated public java.util.List<StyrkCategory> categories;
  @Deprecated public String source;
  @Deprecated public String medium;
  @Deprecated public String reference;
  @Deprecated public String publishedByAdmin;
  @Deprecated public String businessName;
  @Deprecated public java.util.List<Location> locations;
  @Deprecated public java.util.List<Property> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Ad() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param adnr The new value for adnr
   * @param title The new value for title
   * @param status The new value for status
   * @param privacy The new value for privacy
   * @param administration The new value for administration
   * @param published The new value for published
   * @param expires The new value for expires
   * @param created The new value for created
   * @param updated The new value for updated
   * @param employer The new value for employer
   * @param categories The new value for categories
   * @param source The new value for source
   * @param medium The new value for medium
   * @param reference The new value for reference
   * @param publishedByAdmin The new value for publishedByAdmin
   * @param businessName The new value for businessName
   * @param locations The new value for locations
   * @param properties The new value for properties
   */
  public Ad(String uuid, String adnr, String title, AdStatus status, PrivacyChannel privacy, Administration administration, String published, String expires, String created, String updated, Company employer, java.util.List<StyrkCategory> categories, String source, String medium, String reference, String publishedByAdmin, String businessName, java.util.List<Location> locations, java.util.List<Property> properties) {
    this.uuid = uuid;
    this.adnr = adnr;
    this.title = title;
    this.status = status;
    this.privacy = privacy;
    this.administration = administration;
    this.published = published;
    this.expires = expires;
    this.created = created;
    this.updated = updated;
    this.employer = employer;
    this.categories = categories;
    this.source = source;
    this.medium = medium;
    this.reference = reference;
    this.publishedByAdmin = publishedByAdmin;
    this.businessName = businessName;
    this.locations = locations;
    this.properties = properties;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return adnr;
    case 2: return title;
    case 3: return status;
    case 4: return privacy;
    case 5: return administration;
    case 6: return published;
    case 7: return expires;
    case 8: return created;
    case 9: return updated;
    case 10: return employer;
    case 11: return categories;
    case 12: return source;
    case 13: return medium;
    case 14: return reference;
    case 15: return publishedByAdmin;
    case 16: return businessName;
    case 17: return locations;
    case 18: return properties;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: uuid = value$ != null ? value$.toString() : null; break;
    case 1: adnr = value$ != null ? value$.toString() : null; break;
    case 2: title = value$ != null ? value$.toString() : null; break;
    case 3: status = (AdStatus)value$; break;
    case 4: privacy = (PrivacyChannel)value$; break;
    case 5: administration = (Administration)value$; break;
    case 6: published = value$ != null ? value$.toString() : null; break;
    case 7: expires = value$ != null ? value$.toString() : null; break;
    case 8: created = value$ != null ? value$.toString() : null; break;
    case 9: updated = value$ != null ? value$.toString() : null; break;
    case 10: employer = (Company)value$; break;
    case 11: categories = (java.util.List<StyrkCategory>)value$; break;
    case 12: source = value$ != null ? value$.toString() : null; break;
    case 13: medium = value$ != null ? value$.toString() : null; break;
    case 14: reference = value$ != null ? value$.toString() : null; break;
    case 15: publishedByAdmin = value$ != null ? value$.toString() : null; break;
    case 16: businessName = value$ != null ? value$.toString() : null; break;
    case 17: locations = (java.util.List<Location>)value$; break;
    case 18: properties = (java.util.List<Property>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public String getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'adnr' field.
   * @return The value of the 'adnr' field.
   */
  public String getAdnr() {
    return adnr;
  }


  /**
   * Sets the value of the 'adnr' field.
   * @param value the value to set.
   */
  public void setAdnr(String value) {
    this.adnr = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public String getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public AdStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(AdStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'privacy' field.
   * @return The value of the 'privacy' field.
   */
  public PrivacyChannel getPrivacy() {
    return privacy;
  }


  /**
   * Sets the value of the 'privacy' field.
   * @param value the value to set.
   */
  public void setPrivacy(PrivacyChannel value) {
    this.privacy = value;
  }

  /**
   * Gets the value of the 'administration' field.
   * @return The value of the 'administration' field.
   */
  public Administration getAdministration() {
    return administration;
  }


  /**
   * Sets the value of the 'administration' field.
   * @param value the value to set.
   */
  public void setAdministration(Administration value) {
    this.administration = value;
  }

  /**
   * Gets the value of the 'published' field.
   * @return The value of the 'published' field.
   */
  public String getPublished() {
    return published;
  }


  /**
   * Sets the value of the 'published' field.
   * @param value the value to set.
   */
  public void setPublished(String value) {
    this.published = value;
  }

  /**
   * Gets the value of the 'expires' field.
   * @return The value of the 'expires' field.
   */
  public String getExpires() {
    return expires;
  }


  /**
   * Sets the value of the 'expires' field.
   * @param value the value to set.
   */
  public void setExpires(String value) {
    this.expires = value;
  }

  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public String getCreated() {
    return created;
  }


  /**
   * Sets the value of the 'created' field.
   * @param value the value to set.
   */
  public void setCreated(String value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'updated' field.
   * @return The value of the 'updated' field.
   */
  public String getUpdated() {
    return updated;
  }


  /**
   * Sets the value of the 'updated' field.
   * @param value the value to set.
   */
  public void setUpdated(String value) {
    this.updated = value;
  }

  /**
   * Gets the value of the 'employer' field.
   * @return The value of the 'employer' field.
   */
  public Company getEmployer() {
    return employer;
  }


  /**
   * Sets the value of the 'employer' field.
   * @param value the value to set.
   */
  public void setEmployer(Company value) {
    this.employer = value;
  }

  /**
   * Gets the value of the 'categories' field.
   * @return The value of the 'categories' field.
   */
  public java.util.List<StyrkCategory> getCategories() {
    return categories;
  }


  /**
   * Sets the value of the 'categories' field.
   * @param value the value to set.
   */
  public void setCategories(java.util.List<StyrkCategory> value) {
    this.categories = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public String getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'medium' field.
   * @return The value of the 'medium' field.
   */
  public String getMedium() {
    return medium;
  }


  /**
   * Sets the value of the 'medium' field.
   * @param value the value to set.
   */
  public void setMedium(String value) {
    this.medium = value;
  }

  /**
   * Gets the value of the 'reference' field.
   * @return The value of the 'reference' field.
   */
  public String getReference() {
    return reference;
  }


  /**
   * Sets the value of the 'reference' field.
   * @param value the value to set.
   */
  public void setReference(String value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'publishedByAdmin' field.
   * @return The value of the 'publishedByAdmin' field.
   */
  public String getPublishedByAdmin() {
    return publishedByAdmin;
  }


  /**
   * Sets the value of the 'publishedByAdmin' field.
   * @param value the value to set.
   */
  public void setPublishedByAdmin(String value) {
    this.publishedByAdmin = value;
  }

  /**
   * Gets the value of the 'businessName' field.
   * @return The value of the 'businessName' field.
   */
  public String getBusinessName() {
    return businessName;
  }


  /**
   * Sets the value of the 'businessName' field.
   * @param value the value to set.
   */
  public void setBusinessName(String value) {
    this.businessName = value;
  }

  /**
   * Gets the value of the 'locations' field.
   * @return The value of the 'locations' field.
   */
  public java.util.List<Location> getLocations() {
    return locations;
  }


  /**
   * Sets the value of the 'locations' field.
   * @param value the value to set.
   */
  public void setLocations(java.util.List<Location> value) {
    this.locations = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return The value of the 'properties' field.
   */
  public java.util.List<Property> getProperties() {
    return properties;
  }


  /**
   * Sets the value of the 'properties' field.
   * @param value the value to set.
   */
  public void setProperties(java.util.List<Property> value) {
    this.properties = value;
  }

  /**
   * Creates a new Ad RecordBuilder.
   * @return A new Ad RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Ad RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Ad RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Ad RecordBuilder by copying an existing Ad instance.
   * @param other The existing instance to copy.
   * @return A new Ad RecordBuilder
   */
  public static Builder newBuilder(Ad other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Ad instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Ad>
    implements org.apache.avro.data.RecordBuilder<Ad> {

    private String uuid;
    private String adnr;
    private String title;
    private AdStatus status;
    private PrivacyChannel privacy;
    private Administration administration;
    private Administration.Builder administrationBuilder;
    private String published;
    private String expires;
    private String created;
    private String updated;
    private Company employer;
    private Company.Builder employerBuilder;
    private java.util.List<StyrkCategory> categories;
    private String source;
    private String medium;
    private String reference;
    private String publishedByAdmin;
    private String businessName;
    private java.util.List<Location> locations;
    private java.util.List<Property> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.adnr)) {
        this.adnr = data().deepCopy(fields()[1].schema(), other.adnr);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.privacy)) {
        this.privacy = data().deepCopy(fields()[4].schema(), other.privacy);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.administration)) {
        this.administration = data().deepCopy(fields()[5].schema(), other.administration);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasAdministrationBuilder()) {
        this.administrationBuilder = Administration.newBuilder(other.getAdministrationBuilder());
      }
      if (isValidValue(fields()[6], other.published)) {
        this.published = data().deepCopy(fields()[6].schema(), other.published);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.expires)) {
        this.expires = data().deepCopy(fields()[7].schema(), other.expires);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.created)) {
        this.created = data().deepCopy(fields()[8].schema(), other.created);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.updated)) {
        this.updated = data().deepCopy(fields()[9].schema(), other.updated);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.employer)) {
        this.employer = data().deepCopy(fields()[10].schema(), other.employer);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasEmployerBuilder()) {
        this.employerBuilder = Company.newBuilder(other.getEmployerBuilder());
      }
      if (isValidValue(fields()[11], other.categories)) {
        this.categories = data().deepCopy(fields()[11].schema(), other.categories);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.source)) {
        this.source = data().deepCopy(fields()[12].schema(), other.source);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.medium)) {
        this.medium = data().deepCopy(fields()[13].schema(), other.medium);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.reference)) {
        this.reference = data().deepCopy(fields()[14].schema(), other.reference);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.publishedByAdmin)) {
        this.publishedByAdmin = data().deepCopy(fields()[15].schema(), other.publishedByAdmin);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.businessName)) {
        this.businessName = data().deepCopy(fields()[16].schema(), other.businessName);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.locations)) {
        this.locations = data().deepCopy(fields()[17].schema(), other.locations);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.properties)) {
        this.properties = data().deepCopy(fields()[18].schema(), other.properties);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing Ad instance
     * @param other The existing instance to copy.
     */
    private Builder(Ad other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.adnr)) {
        this.adnr = data().deepCopy(fields()[1].schema(), other.adnr);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.privacy)) {
        this.privacy = data().deepCopy(fields()[4].schema(), other.privacy);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.administration)) {
        this.administration = data().deepCopy(fields()[5].schema(), other.administration);
        fieldSetFlags()[5] = true;
      }
      this.administrationBuilder = null;
      if (isValidValue(fields()[6], other.published)) {
        this.published = data().deepCopy(fields()[6].schema(), other.published);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.expires)) {
        this.expires = data().deepCopy(fields()[7].schema(), other.expires);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.created)) {
        this.created = data().deepCopy(fields()[8].schema(), other.created);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.updated)) {
        this.updated = data().deepCopy(fields()[9].schema(), other.updated);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.employer)) {
        this.employer = data().deepCopy(fields()[10].schema(), other.employer);
        fieldSetFlags()[10] = true;
      }
      this.employerBuilder = null;
      if (isValidValue(fields()[11], other.categories)) {
        this.categories = data().deepCopy(fields()[11].schema(), other.categories);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.source)) {
        this.source = data().deepCopy(fields()[12].schema(), other.source);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.medium)) {
        this.medium = data().deepCopy(fields()[13].schema(), other.medium);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.reference)) {
        this.reference = data().deepCopy(fields()[14].schema(), other.reference);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.publishedByAdmin)) {
        this.publishedByAdmin = data().deepCopy(fields()[15].schema(), other.publishedByAdmin);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.businessName)) {
        this.businessName = data().deepCopy(fields()[16].schema(), other.businessName);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.locations)) {
        this.locations = data().deepCopy(fields()[17].schema(), other.locations);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.properties)) {
        this.properties = data().deepCopy(fields()[18].schema(), other.properties);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public String getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public Builder setUuid(String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'adnr' field.
      * @return The value.
      */
    public String getAdnr() {
      return adnr;
    }


    /**
      * Sets the value of the 'adnr' field.
      * @param value The value of 'adnr'.
      * @return This builder.
      */
    public Builder setAdnr(String value) {
      validate(fields()[1], value);
      this.adnr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'adnr' field has been set.
      * @return True if the 'adnr' field has been set, false otherwise.
      */
    public boolean hasAdnr() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'adnr' field.
      * @return This builder.
      */
    public Builder clearAdnr() {
      adnr = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public String getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public Builder setTitle(String value) {
      validate(fields()[2], value);
      this.title = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public Builder clearTitle() {
      title = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public AdStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public Builder setStatus(AdStatus value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'privacy' field.
      * @return The value.
      */
    public PrivacyChannel getPrivacy() {
      return privacy;
    }


    /**
      * Sets the value of the 'privacy' field.
      * @param value The value of 'privacy'.
      * @return This builder.
      */
    public Builder setPrivacy(PrivacyChannel value) {
      validate(fields()[4], value);
      this.privacy = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'privacy' field has been set.
      * @return True if the 'privacy' field has been set, false otherwise.
      */
    public boolean hasPrivacy() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'privacy' field.
      * @return This builder.
      */
    public Builder clearPrivacy() {
      privacy = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'administration' field.
      * @return The value.
      */
    public Administration getAdministration() {
      return administration;
    }


    /**
      * Sets the value of the 'administration' field.
      * @param value The value of 'administration'.
      * @return This builder.
      */
    public Builder setAdministration(Administration value) {
      validate(fields()[5], value);
      this.administrationBuilder = null;
      this.administration = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'administration' field has been set.
      * @return True if the 'administration' field has been set, false otherwise.
      */
    public boolean hasAdministration() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'administration' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Administration.Builder getAdministrationBuilder() {
      if (administrationBuilder == null) {
        if (hasAdministration()) {
          setAdministrationBuilder(Administration.newBuilder(administration));
        } else {
          setAdministrationBuilder(Administration.newBuilder());
        }
      }
      return administrationBuilder;
    }

    /**
     * Sets the Builder instance for the 'administration' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setAdministrationBuilder(Administration.Builder value) {
      clearAdministration();
      administrationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'administration' field has an active Builder instance
     * @return True if the 'administration' field has an active Builder instance
     */
    public boolean hasAdministrationBuilder() {
      return administrationBuilder != null;
    }

    /**
      * Clears the value of the 'administration' field.
      * @return This builder.
      */
    public Builder clearAdministration() {
      administration = null;
      administrationBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'published' field.
      * @return The value.
      */
    public String getPublished() {
      return published;
    }


    /**
      * Sets the value of the 'published' field.
      * @param value The value of 'published'.
      * @return This builder.
      */
    public Builder setPublished(String value) {
      validate(fields()[6], value);
      this.published = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'published' field has been set.
      * @return True if the 'published' field has been set, false otherwise.
      */
    public boolean hasPublished() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'published' field.
      * @return This builder.
      */
    public Builder clearPublished() {
      published = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'expires' field.
      * @return The value.
      */
    public String getExpires() {
      return expires;
    }


    /**
      * Sets the value of the 'expires' field.
      * @param value The value of 'expires'.
      * @return This builder.
      */
    public Builder setExpires(String value) {
      validate(fields()[7], value);
      this.expires = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'expires' field has been set.
      * @return True if the 'expires' field has been set, false otherwise.
      */
    public boolean hasExpires() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'expires' field.
      * @return This builder.
      */
    public Builder clearExpires() {
      expires = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public String getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public Builder setCreated(String value) {
      validate(fields()[8], value);
      this.created = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public Builder clearCreated() {
      created = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'updated' field.
      * @return The value.
      */
    public String getUpdated() {
      return updated;
    }


    /**
      * Sets the value of the 'updated' field.
      * @param value The value of 'updated'.
      * @return This builder.
      */
    public Builder setUpdated(String value) {
      validate(fields()[9], value);
      this.updated = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'updated' field has been set.
      * @return True if the 'updated' field has been set, false otherwise.
      */
    public boolean hasUpdated() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'updated' field.
      * @return This builder.
      */
    public Builder clearUpdated() {
      updated = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'employer' field.
      * @return The value.
      */
    public Company getEmployer() {
      return employer;
    }


    /**
      * Sets the value of the 'employer' field.
      * @param value The value of 'employer'.
      * @return This builder.
      */
    public Builder setEmployer(Company value) {
      validate(fields()[10], value);
      this.employerBuilder = null;
      this.employer = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'employer' field has been set.
      * @return True if the 'employer' field has been set, false otherwise.
      */
    public boolean hasEmployer() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'employer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Company.Builder getEmployerBuilder() {
      if (employerBuilder == null) {
        if (hasEmployer()) {
          setEmployerBuilder(Company.newBuilder(employer));
        } else {
          setEmployerBuilder(Company.newBuilder());
        }
      }
      return employerBuilder;
    }

    /**
     * Sets the Builder instance for the 'employer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setEmployerBuilder(Company.Builder value) {
      clearEmployer();
      employerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'employer' field has an active Builder instance
     * @return True if the 'employer' field has an active Builder instance
     */
    public boolean hasEmployerBuilder() {
      return employerBuilder != null;
    }

    /**
      * Clears the value of the 'employer' field.
      * @return This builder.
      */
    public Builder clearEmployer() {
      employer = null;
      employerBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'categories' field.
      * @return The value.
      */
    public java.util.List<StyrkCategory> getCategories() {
      return categories;
    }


    /**
      * Sets the value of the 'categories' field.
      * @param value The value of 'categories'.
      * @return This builder.
      */
    public Builder setCategories(java.util.List<StyrkCategory> value) {
      validate(fields()[11], value);
      this.categories = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'categories' field has been set.
      * @return True if the 'categories' field has been set, false otherwise.
      */
    public boolean hasCategories() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'categories' field.
      * @return This builder.
      */
    public Builder clearCategories() {
      categories = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public Builder setSource(String value) {
      validate(fields()[12], value);
      this.source = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public Builder clearSource() {
      source = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'medium' field.
      * @return The value.
      */
    public String getMedium() {
      return medium;
    }


    /**
      * Sets the value of the 'medium' field.
      * @param value The value of 'medium'.
      * @return This builder.
      */
    public Builder setMedium(String value) {
      validate(fields()[13], value);
      this.medium = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'medium' field has been set.
      * @return True if the 'medium' field has been set, false otherwise.
      */
    public boolean hasMedium() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'medium' field.
      * @return This builder.
      */
    public Builder clearMedium() {
      medium = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'reference' field.
      * @return The value.
      */
    public String getReference() {
      return reference;
    }


    /**
      * Sets the value of the 'reference' field.
      * @param value The value of 'reference'.
      * @return This builder.
      */
    public Builder setReference(String value) {
      validate(fields()[14], value);
      this.reference = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'reference' field has been set.
      * @return True if the 'reference' field has been set, false otherwise.
      */
    public boolean hasReference() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'reference' field.
      * @return This builder.
      */
    public Builder clearReference() {
      reference = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'publishedByAdmin' field.
      * @return The value.
      */
    public String getPublishedByAdmin() {
      return publishedByAdmin;
    }


    /**
      * Sets the value of the 'publishedByAdmin' field.
      * @param value The value of 'publishedByAdmin'.
      * @return This builder.
      */
    public Builder setPublishedByAdmin(String value) {
      validate(fields()[15], value);
      this.publishedByAdmin = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'publishedByAdmin' field has been set.
      * @return True if the 'publishedByAdmin' field has been set, false otherwise.
      */
    public boolean hasPublishedByAdmin() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'publishedByAdmin' field.
      * @return This builder.
      */
    public Builder clearPublishedByAdmin() {
      publishedByAdmin = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'businessName' field.
      * @return The value.
      */
    public String getBusinessName() {
      return businessName;
    }


    /**
      * Sets the value of the 'businessName' field.
      * @param value The value of 'businessName'.
      * @return This builder.
      */
    public Builder setBusinessName(String value) {
      validate(fields()[16], value);
      this.businessName = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'businessName' field has been set.
      * @return True if the 'businessName' field has been set, false otherwise.
      */
    public boolean hasBusinessName() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'businessName' field.
      * @return This builder.
      */
    public Builder clearBusinessName() {
      businessName = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'locations' field.
      * @return The value.
      */
    public java.util.List<Location> getLocations() {
      return locations;
    }


    /**
      * Sets the value of the 'locations' field.
      * @param value The value of 'locations'.
      * @return This builder.
      */
    public Builder setLocations(java.util.List<Location> value) {
      validate(fields()[17], value);
      this.locations = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'locations' field has been set.
      * @return True if the 'locations' field has been set, false otherwise.
      */
    public boolean hasLocations() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'locations' field.
      * @return This builder.
      */
    public Builder clearLocations() {
      locations = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * @return The value.
      */
    public java.util.List<Property> getProperties() {
      return properties;
    }


    /**
      * Sets the value of the 'properties' field.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public Builder setProperties(java.util.List<Property> value) {
      validate(fields()[18], value);
      this.properties = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'properties' field.
      * @return This builder.
      */
    public Builder clearProperties() {
      properties = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Ad build() {
      try {
        Ad record = new Ad();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (String) defaultValue(fields()[0]);
        record.adnr = fieldSetFlags()[1] ? this.adnr : (String) defaultValue(fields()[1]);
        record.title = fieldSetFlags()[2] ? this.title : (String) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (AdStatus) defaultValue(fields()[3]);
        record.privacy = fieldSetFlags()[4] ? this.privacy : (PrivacyChannel) defaultValue(fields()[4]);
        if (administrationBuilder != null) {
          try {
            record.administration = this.administrationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("administration"));
            throw e;
          }
        } else {
          record.administration = fieldSetFlags()[5] ? this.administration : (Administration) defaultValue(fields()[5]);
        }
        record.published = fieldSetFlags()[6] ? this.published : (String) defaultValue(fields()[6]);
        record.expires = fieldSetFlags()[7] ? this.expires : (String) defaultValue(fields()[7]);
        record.created = fieldSetFlags()[8] ? this.created : (String) defaultValue(fields()[8]);
        record.updated = fieldSetFlags()[9] ? this.updated : (String) defaultValue(fields()[9]);
        if (employerBuilder != null) {
          try {
            record.employer = this.employerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("employer"));
            throw e;
          }
        } else {
          record.employer = fieldSetFlags()[10] ? this.employer : (Company) defaultValue(fields()[10]);
        }
        record.categories = fieldSetFlags()[11] ? this.categories : (java.util.List<StyrkCategory>) defaultValue(fields()[11]);
        record.source = fieldSetFlags()[12] ? this.source : (String) defaultValue(fields()[12]);
        record.medium = fieldSetFlags()[13] ? this.medium : (String) defaultValue(fields()[13]);
        record.reference = fieldSetFlags()[14] ? this.reference : (String) defaultValue(fields()[14]);
        record.publishedByAdmin = fieldSetFlags()[15] ? this.publishedByAdmin : (String) defaultValue(fields()[15]);
        record.businessName = fieldSetFlags()[16] ? this.businessName : (String) defaultValue(fields()[16]);
        record.locations = fieldSetFlags()[17] ? this.locations : (java.util.List<Location>) defaultValue(fields()[17]);
        record.properties = fieldSetFlags()[18] ? this.properties : (java.util.List<Property>) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Ad>
    WRITER$ = (org.apache.avro.io.DatumWriter<Ad>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Ad>
    READER$ = (org.apache.avro.io.DatumReader<Ad>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.uuid);

    if (this.adnr == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.adnr);
    }

    out.writeString(this.title);

    out.writeEnum(this.status.ordinal());

    out.writeEnum(this.privacy.ordinal());

    if (this.administration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.administration.customEncode(out);
    }

    out.writeString(this.published);

    if (this.expires == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.expires);
    }

    out.writeString(this.created);

    out.writeString(this.updated);

    if (this.employer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.employer.customEncode(out);
    }

    long size0 = this.categories.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (StyrkCategory e0: this.categories) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.source);

    out.writeString(this.medium);

    out.writeString(this.reference);

    if (this.publishedByAdmin == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.publishedByAdmin);
    }

    if (this.businessName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.businessName);
    }

    long size1 = this.locations.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (Location e1: this.locations) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.properties.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (Property e2: this.properties) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.uuid = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.adnr = null;
      } else {
        this.adnr = in.readString();
      }

      this.title = in.readString();

      this.status = AdStatus.values()[in.readEnum()];

      this.privacy = PrivacyChannel.values()[in.readEnum()];

      if (in.readIndex() != 1) {
        in.readNull();
        this.administration = null;
      } else {
        if (this.administration == null) {
          this.administration = new Administration();
        }
        this.administration.customDecode(in);
      }

      this.published = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.expires = null;
      } else {
        this.expires = in.readString();
      }

      this.created = in.readString();

      this.updated = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.employer = null;
      } else {
        if (this.employer == null) {
          this.employer = new Company();
        }
        this.employer.customDecode(in);
      }

      long size0 = in.readArrayStart();
      java.util.List<StyrkCategory> a0 = this.categories;
      if (a0 == null) {
        a0 = new SpecificData.Array<StyrkCategory>((int)size0, SCHEMA$.getField("categories").schema());
        this.categories = a0;
      } else a0.clear();
      SpecificData.Array<StyrkCategory> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<StyrkCategory>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          StyrkCategory e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new StyrkCategory();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.source = in.readString();

      this.medium = in.readString();

      this.reference = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.publishedByAdmin = null;
      } else {
        this.publishedByAdmin = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.businessName = null;
      } else {
        this.businessName = in.readString();
      }

      long size1 = in.readArrayStart();
      java.util.List<Location> a1 = this.locations;
      if (a1 == null) {
        a1 = new SpecificData.Array<Location>((int)size1, SCHEMA$.getField("locations").schema());
        this.locations = a1;
      } else a1.clear();
      SpecificData.Array<Location> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<Location>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          Location e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new Location();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<Property> a2 = this.properties;
      if (a2 == null) {
        a2 = new SpecificData.Array<Property>((int)size2, SCHEMA$.getField("properties").schema());
        this.properties = a2;
      } else a2.clear();
      SpecificData.Array<Property> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<Property>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          Property e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new Property();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

    } else {
      for (int i = 0; i < 19; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.uuid = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.adnr = null;
          } else {
            this.adnr = in.readString();
          }
          break;

        case 2:
          this.title = in.readString();
          break;

        case 3:
          this.status = AdStatus.values()[in.readEnum()];
          break;

        case 4:
          this.privacy = PrivacyChannel.values()[in.readEnum()];
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.administration = null;
          } else {
            if (this.administration == null) {
              this.administration = new Administration();
            }
            this.administration.customDecode(in);
          }
          break;

        case 6:
          this.published = in.readString();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.expires = null;
          } else {
            this.expires = in.readString();
          }
          break;

        case 8:
          this.created = in.readString();
          break;

        case 9:
          this.updated = in.readString();
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.employer = null;
          } else {
            if (this.employer == null) {
              this.employer = new Company();
            }
            this.employer.customDecode(in);
          }
          break;

        case 11:
          long size0 = in.readArrayStart();
          java.util.List<StyrkCategory> a0 = this.categories;
          if (a0 == null) {
            a0 = new SpecificData.Array<StyrkCategory>((int)size0, SCHEMA$.getField("categories").schema());
            this.categories = a0;
          } else a0.clear();
          SpecificData.Array<StyrkCategory> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<StyrkCategory>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              StyrkCategory e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new StyrkCategory();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 12:
          this.source = in.readString();
          break;

        case 13:
          this.medium = in.readString();
          break;

        case 14:
          this.reference = in.readString();
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.publishedByAdmin = null;
          } else {
            this.publishedByAdmin = in.readString();
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.businessName = null;
          } else {
            this.businessName = in.readString();
          }
          break;

        case 17:
          long size1 = in.readArrayStart();
          java.util.List<Location> a1 = this.locations;
          if (a1 == null) {
            a1 = new SpecificData.Array<Location>((int)size1, SCHEMA$.getField("locations").schema());
            this.locations = a1;
          } else a1.clear();
          SpecificData.Array<Location> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<Location>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              Location e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new Location();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 18:
          long size2 = in.readArrayStart();
          java.util.List<Property> a2 = this.properties;
          if (a2 == null) {
            a2 = new SpecificData.Array<Property>((int)size2, SCHEMA$.getField("properties").schema());
            this.properties = a2;
          } else a2.clear();
          SpecificData.Array<Property> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<Property>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              Property e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new Property();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










